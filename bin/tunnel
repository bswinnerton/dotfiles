#!/usr/bin/env ruby

require 'rack'
require 'json'
require 'pry'

module TerminalColors
  def purple(text)
    colorize(text, 35)
  end

  def cyan(text)
    colorize(text, 36)
  end

  def grey(text)
    colorize(text, 90)
  end

  def yellow(text)
    colorize(text, 33)
  end

  def red(text)
    colorize(text, 31)
  end

  def colorize(text, color)
    "\e[#{color}m#{text}\e[0m"
  end
end

class TunnelServer
  include TerminalColors

  TERMINAL_SIZE = 80

  def initialize(port:)
    @port   = port || 9292
    @tunnel = Process.spawn(ssh_command)
  end

  def call(env)
    @request  = Rack::Request.new(env)
    @response = Rack::Response.new

    print_delimiter
    print_request_info
    print_headers
    print_body_and_yank_to_clipboard

    #TODO: Forward request to http://localhost:#{port}

    response.status = 200
    response['Content-Type'] = 'text/html'
    response.write(default_html)

    print_delimiter
    puts "\n\n"

    response.finish
  rescue => exception
    puts red(exception.backtrace.join("\n"))
    binding.pry
  end

  private

  attr_reader :port, :request, :response

  def print_delimiter
    puts grey('*' * TERMINAL_SIZE)
  end

  def print_request_info
    method    = request.env.fetch('REQUEST_METHOD')
    uri       = request.env.fetch('REQUEST_URI')
    ip        = request.env.fetch('REMOTE_ADDR')

    request_info    = "#{ip} - #{method} #{uri}"
    time_of_request = Time.now.to_s

    spaces = ' ' * (TERMINAL_SIZE - (request_info.size + time_of_request.size))

    puts yellow("#{request_info}#{spaces}#{time_of_request}")
  end

  def print_headers
    puts
    parsed_request_headers.each do |key, value|
      name = humanize(key)

      case name
      when 'Version'
        puts purple(value).strip
      else
        puts purple("#{name}: #{value}").strip
      end
    end
    puts
  end

  def print_body_and_yank_to_clipboard
    return unless !request_body.empty?
    formatted_json = JSON.pretty_generate(parsed_request_body)
    system("echo '#{formatted_json}' | pbcopy")
    puts cyan(formatted_json)
  end

  def parsed_request_headers
    request.env.each_with_object({}) do |(key, value), hash|
      if key.start_with?('HTTP_')
        hash[key.gsub('HTTP_', '')] = value
      end
    end
  end

  def parsed_request_body
    JSON.parse(request_body)
  end

  def default_html
    <<-HTML
    <html>
    <div style="text-align:center;margin-top:100px;">
      <p style="font-size:50px;">ðŸ‘‹</p>
      <a style="font-size:12px;" href="https://git.io/v1WXJ">[source]</a>
      </div>
    </html>
    HTML
  end

  def request_body
    @request_body ||= request.body.read
  end

  def humanize(string)
    pieces = string.split(/_|-/)
    pieces.map { |piece| piece.capitalize }.join('-')
  end

  def ssh_command
    "ssh -nNT -R 80:localhost:#{port} root@tunnel.computer"
  end
end

SERVER = TunnelServer.new(port: ARGV.first)
Rack::Server.start(app: SERVER)

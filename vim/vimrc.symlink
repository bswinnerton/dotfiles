"-------------------------------------------------------------------------------
" Basic Settings
"-------------------------------------------------------------------------------

" Syntax highlighting
syntax on

" Leader - override default of \
let mapleader=','

" Command mode menu suggestions
set wildmenu

" Backspace
set backspace=indent,eol,start

" Backup files (none)
set nobackup
set nowritebackup
set noswapfile

" Tabs
set expandtab
set shiftwidth=2
set tabstop=2

" Searching
set hlsearch
set smartcase
set incsearch
set ignorecase
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR><Esc>:let @/=''

" Splits - more intuitive placement
set splitright
set splitbelow

" Mouse support
if has('mouse')
  set mouse=a
endif

" Scroll buffer
set scrolloff=5

" Auto reload changed files
set autoread

" Clipboard support (OSX)
set clipboard=unnamed

" Ignored files/directories from Vim autocomplete
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/vendor/bundle/*,*/public/test/*,*/node_modules/

" Turn off bells
set noerrorbells
set novisualbell

" Show status line on startup
set laststatus=2


"-------------------------------------------------------------------------------
" Vim Interface
"-------------------------------------------------------------------------------

set number
set cursorline
set cursorcolumn

" Sets background for 81st column onward
if exists('+colorcolumn')
  "set colorcolumn=81
  let &colorcolumn=join(range(81,999),",")
endif

" Set text width to 80 characters in Markdown
au BufRead,BufNewFile *.md setlocal textwidth=80

" Highlight extra whitespace
highlight ExtraWhitespace ctermbg=red
match ExtraWhitespace /\s\+$/

" Reduce redraw frequency
set lazyredraw

" Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

" Hide horizontal cursor when focus changes
augroup CursorLine
    au!
    au VimEnter * setlocal cursorline
    au WinEnter * setlocal cursorline
    au BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" Hide vertical cursor when focus changes
augroup CursorColumn
    au!
    au VimEnter * setlocal cursorcolumn
    au WinEnter * setlocal cursorcolumn
    au BufWinEnter * setlocal cursorcolumn
    au WinLeave * setlocal nocursorcolumn
augroup END


"-------------------------------------------------------------------------------
" Colors
"-------------------------------------------------------------------------------

set t_Co=16
set background=light

highlight LineNr ctermbg=245
highlight LineNr ctermfg=253
highlight CursorLine cterm=none ctermbg=236
highlight CursorColumn cterm=none ctermbg=236
highlight ColorColumn ctermbg=236
highlight CursorLineNr ctermfg=green ctermbg=240 guifg=#00CED1 guibg=#404040
highlight SignColumn ctermbg=none
highlight VertSplit cterm=none ctermbg=251 ctermfg=251

" Automatically remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e


"-------------------------------------------------------------------------------
" Custom Movement
"-------------------------------------------------------------------------------

" Don't deselect visual block after indent/unindent
vnoremap < <gv
vnoremap > >gv

" Shortcut for <CTRL> + hjkl to traverse panes
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Bash like keys for the Vim command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>

" Remap j and k to act as expected when used on long, wrapped, lines
nnoremap j gj
nnoremap k gk


"-------------------------------------------------------------------------------
" Custom Mappings
"-------------------------------------------------------------------------------

" Easy access to run commands from Vim
map <Leader><Leader> :!

" Redraw the screen
map <silent> <Leader>rr :redraw!

" Open Nerdtree
map <C-n> :NERDTreeToggle<CR>

" Execute RSpec commands in tmux panes
map <silent> <Leader>rs :AS<CR>,rb:q<CR>
map <silent> <Leader>rb :call VimuxRunCommand("clear; bundle exec rspec " . bufname("%"))<CR>
map <silent> <Leader>rl :call VimuxRunCommand("clear; bundle exec rspec " . bufname("%") . ":" . line("."))<CR>


"-------------------------------------------------------------------------------
" Plugins
"-------------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')
Plug 'MarcWeber/vim-addon-mw-utils'   " Required for vim-snipmate
Plug 'tomtom/tlib_vim'                " Required for vim-snipmate
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'             " Optional for vim-snipmate
Plug 'scrooloose/syntastic'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'benmills/vimux'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'airblade/vim-gitgutter'
Plug 'terryma/vim-multiple-cursors'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ervandew/supertab'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'janko-m/vim-test'
Plug 'bswinnerton/vim-test-github'
Plug 'tpope/vim-bundler'
Plug 'kchmck/vim-coffee-script'
Plug 'groenewege/vim-less'
Plug 'tpope/vim-haml'
Plug 'walm/jshint.vim'
Plug 'elzr/vim-json'
Plug 'tpope/vim-markdown'
Plug 'mattn/webapi-vim'               " Required for gist-vim
Plug 'mattn/gist-vim'
Plug 'chriskempson/base16-vim'
Plug 'guns/xterm-color-table.vim'
Plug 'chrisbra/Colorizer'
call plug#end()

" ack-vim
let g:ackprg = 'ag --nogroup --nocolor --column'

" CtrlP
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" vim-airline
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_extensions = ['ctrlp']

" vim-multiple-cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-g>'
let g:multi_cursor_prev_key='<C-h>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" vim-test
let test#strategy = "vimux"
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>

let test#runners = {'Ruby': ['GitHub']}

" Neovim
if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  set background=dark
  colorscheme base16-ocean

  " https://github.com/neovim/neovim/issues/2048
  nmap <BS> <C-W>h
endif
